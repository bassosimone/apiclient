// Command genclientcall generates clientcall.go.
package main

import (
	"strings"
	"time"

	"github.com/bassosimone/apiclient/internal/apimodel"
	"github.com/bassosimone/apiclient/internal/fmtx"
	"github.com/bassosimone/apiclient/internal/osx"
	"github.com/bassosimone/apiclient/internal/reflectx"
)

func getapiame(in interface{}) string {
	name := reflectx.Must(reflectx.NewTypeValueInfo(in)).TypeName()
	name = strings.Replace(name, "Request", "", 1)
	name = strings.Replace(name, "Response", "", 1)
	return name
}

func getname(in interface{}) string {
	return reflectx.Must(reflectx.NewTypeValueInfo(in)).TypeName()
}

func generate(filep osx.File, desc *apimodel.Descriptor) {
	apiname := getapiame(desc.Response)
	reqname := getname(desc.Request)
	resp := reflectx.Must(reflectx.NewTypeValueInfo(desc.Response))
	fmtx.Fprintf(filep, "// %s calls the %s API.\n", apiname, apiname)
	fmtx.Fprintf(filep, "func (c *Client) %s(", apiname)
	fmtx.Fprintf(filep, "ctx context.Context, req *%s) (%s, error) {\n", reqname, resp.AsReturnType())
	fmtx.Fprintf(filep, "\treturn new%sAPI(c).Call(ctx, req)\n", apiname)
	fmtx.Fprintf(filep, "}\n\n")
}

func main() {
	filep := osx.MustCreate("clientcall.go")
	defer filep.Close()

	fmtx.Fprint(filep, "// Code generated by go generate; DO NOT EDIT.\n")
	fmtx.Fprintf(filep, "// %v\n\n", time.Now())
	fmtx.Fprint(filep, "package apiclient\n\n")
	fmtx.Fprint(filep, "import \"context\"\n\n")

	fmtx.Fprint(filep, "//go:generate go run ./internal/genclientcall/...\n\n")

	for _, descr := range apimodel.Descriptors {
		generate(filep, &descr)
	}
}
