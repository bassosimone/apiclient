package main

import (
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/bassosimone/apiclient/internal/apimodel"
	"github.com/bassosimone/apiclient/internal/fatalx"
	"github.com/bassosimone/apiclient/internal/reflectx"
)

func gettype(in interface{}) string {
	sinfo, err := reflectx.NewStructInfo(in)
	fatalx.OnError(err, "reflectx.NewStructInfo failed")
	return sinfo.TypeName()
}

func getapiame(in interface{}) string {
	name := gettype(in)
	name = strings.Replace(name, "Request", "", 1)
	name = strings.Replace(name, "Response", "", 1)
	return name
}

func genbeginfunc(filep *os.File, desc *apimodel.Descriptor) {
	resp := gettype(desc.Response)
	req := gettype(desc.Request)
	apiname := getapiame(desc.Response)
	fmt.Fprintf(filep, "// %s%s implements the %s %s API\n", desc.Method, apiname, desc.Method, desc.URLPath)
	fmt.Fprintf(filep, "func (c Client) %s%s", desc.Method, apiname)
	fmt.Fprintf(filep, "(ctx context.Context, in *%s)", req)
	fmt.Fprintf(filep, " (*%s, error) {\n", resp)
}

func gencall(filep *os.File, desc *apimodel.Descriptor) {
	resp := gettype(desc.Response)
	req := gettype(desc.Request)
	fmt.Fprintf(filep, "\treq, err := New%s(ctx, c.BaseURL, in)\n", req)
	fmt.Fprint(filep, "\tif err != nil {\n")
	fmt.Fprint(filep, "\t\treturn nil, err\n")
	fmt.Fprint(filep, "\t}\n")
	fmt.Fprintf(filep, "\treturn New%s(c.HTTPClient.Do(req))\n", resp)
}

func genendfunc(filep *os.File) {
	fmt.Fprintf(filep, "}\n\n")
}

func genapi(filep *os.File, desc *apimodel.Descriptor) {
	genbeginfunc(filep, desc)
	gencall(filep, desc)
	genendfunc(filep)
}

func main() {
	filep, err := os.Create("api.go")
	fatalx.OnError(err, "os.Create failed")

	// TODO(bassosimone): handle all the possible write errors

	fmt.Fprint(filep, "// Code generated by go generate; DO NOT EDIT.\n")
	fmt.Fprintf(filep, "// %v\n\n", time.Now())
	fmt.Fprint(filep, "package apiclient\n\n")
	fmt.Fprint(filep, "import \"context\"\n\n")

	for _, descr := range apimodel.Descriptors {
		genapi(filep, &descr)
	}

	err = filep.Close()
	fatalx.OnError(err, "filep.Close failed")
}
