// This script generates newresponse.go.
package main

import (
	"time"

	"github.com/bassosimone/apiclient/internal/apimodel"
	"github.com/bassosimone/apiclient/internal/fmtx"
	"github.com/bassosimone/apiclient/internal/osx"
	"github.com/bassosimone/apiclient/internal/reflectx"
)

func genbeginfunc(filep osx.File, desc *apimodel.Descriptor) {
	typevalueinfo := reflectx.Must(reflectx.NewTypeValueInfo(desc.Response))
	fmtx.Fprintf(filep, "func new%s", typevalueinfo.TypeName())
	fmtx.Fprint(filep, "(resp *http.Response, err error)")
	fmtx.Fprintf(filep, " (%s, error) {\n", typevalueinfo.AsReturnType())
}

func genparse(filep osx.File, desc *apimodel.Descriptor) {
	typevalueinfo := reflectx.Must(reflectx.NewTypeValueInfo(desc.Response))
	fmtx.Fprint(filep, "\tif err != nil {\n")
	fmtx.Fprint(filep, "\t\treturn nil, err\n")
	fmtx.Fprint(filep, "\t}\n")
	fmtx.Fprint(filep, "\tif resp.StatusCode != 200 {\n")
	fmtx.Fprint(filep, "\t\treturn nil, errors.New(\"apiclient: http request failed\")\n")
	fmtx.Fprint(filep, "\t}\n")
	fmtx.Fprint(filep, "\tdefer resp.Body.Close()\n")
	fmtx.Fprint(filep, "\treader := io.LimitReader(resp.Body, 4<<20)\n")
	fmtx.Fprint(filep, "\tdata, err := ioutil.ReadAll(reader)\n")
	fmtx.Fprint(filep, "\tif err != nil {\n")
	fmtx.Fprint(filep, "\t\treturn nil, err\n")
	fmtx.Fprint(filep, "\t}\n")
	fmtx.Fprintf(filep, "\tvar out %s\n", typevalueinfo.TypeName())
	fmtx.Fprint(filep, "\tif err := json.Unmarshal(data, &out); err != nil {\n")
	fmtx.Fprint(filep, "\t\treturn nil, err\n")
	fmtx.Fprint(filep, "\t}\n")
	// For rationale, see https://play.golang.org/p/m9-MsTaQ5wt and
	// https://play.golang.org/p/6h-v-PShMk9.
	if typevalueinfo.CanBeNil() {
		fmtx.Fprint(filep, "\tif out == nil {\n")
		fmtx.Fprint(filep, "\t\treturn nil, errors.New(\"apiclient: server returned us a literal null\")\n")
		fmtx.Fprint(filep, "\t}\n")
	}
	fmtx.Fprintf(filep, "\treturn %s, nil\n", typevalueinfo.AsReturnValue("out"))
}

func genendfunc(filep osx.File) {
	fmtx.Fprintf(filep, "}\n\n")
}

func genapi(filep osx.File, desc *apimodel.Descriptor) {
	genbeginfunc(filep, desc)
	genparse(filep, desc)
	genendfunc(filep)
}

func main() {
	filep := osx.MustCreate("newresponse.go")
	defer filep.Close()

	fmtx.Fprint(filep, "// Code generated by go generate; DO NOT EDIT.\n")
	fmtx.Fprintf(filep, "// %v\n\n", time.Now())
	fmtx.Fprint(filep, "package apiclient\n\n")
	fmtx.Fprint(filep, "import (\n")
	fmtx.Fprint(filep, "\t\"encoding/json\"\n")
	fmtx.Fprint(filep, "\t\"errors\"\n")
	fmtx.Fprint(filep, "\t\"io/ioutil\"\n")
	fmtx.Fprint(filep, "\t\"io\"\n")
	fmtx.Fprint(filep, "\t\"net/http\"\n")
	fmtx.Fprint(filep, ")\n\n")

	fmtx.Fprint(filep, "//go:generate go run ./internal/gennewresponse/...\n\n")

	for _, descr := range apimodel.Descriptors {
		genapi(filep, &descr)
	}
}
