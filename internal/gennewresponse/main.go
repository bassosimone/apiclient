package main

import (
	"fmt"
	"os"
	"time"

	"github.com/bassosimone/apiclient/internal/apimodel"
	"github.com/bassosimone/apiclient/internal/fatalx"
	"github.com/bassosimone/apiclient/internal/reflectx"
)

func gettype(in interface{}) string {
	sinfo, err := reflectx.NewStructInfo(in)
	fatalx.OnError(err, "reflectx.NewStructInfo failed")
	return sinfo.TypeName()
}

func genbeginfunc(filep *os.File, desc *apimodel.Descriptor) {
	typename := gettype(desc.Response)
	fmt.Fprintf(filep, "// New%s creates a new %s\n", typename, typename)
	fmt.Fprintf(filep, "func New%s", typename)
	fmt.Fprint(filep, "(resp *http.Response, err error)")
	fmt.Fprintf(filep, " (*%s, error) {\n", typename)
}

func genparse(filep *os.File, desc *apimodel.Descriptor) {
	typename := gettype(desc.Response)
	fmt.Fprint(filep, "\tif err != nil {\n")
	fmt.Fprint(filep, "\t\treturn nil, err\n")
	fmt.Fprint(filep, "\t}\n")
	fmt.Fprint(filep, "\tif resp.StatusCode != 200 {\n")
	fmt.Fprint(filep, "\t\treturn nil, errors.New(\"apiclient: http request failed\")\n")
	fmt.Fprint(filep, "\t}\n")
	fmt.Fprint(filep, "\tdefer resp.Body.Close()\n")
	fmt.Fprint(filep, "\treader := io.LimitReader(resp.Body, 4<<20)\n")
	fmt.Fprint(filep, "\tdata, err := ioutil.ReadAll(reader)\n")
	fmt.Fprint(filep, "\tif err != nil {\n")
	fmt.Fprint(filep, "\t\treturn nil, err\n")
	fmt.Fprint(filep, "\t}\n")
	fmt.Fprintf(filep, "\tvar out %s\n", typename)
	fmt.Fprint(filep, "\tif err := json.Unmarshal(data, &out); err != nil {\n")
	fmt.Fprint(filep, "\t\treturn nil, err\n")
	fmt.Fprint(filep, "\t}\n")
	fmt.Fprint(filep, "\treturn &out, nil\n")
}

func genendfunc(filep *os.File) {
	fmt.Fprintf(filep, "}\n\n")
}

func genapi(filep *os.File, desc *apimodel.Descriptor) {
	genbeginfunc(filep, desc)
	genparse(filep, desc)
	genendfunc(filep)
}

func main() {
	filep, err := os.Create("newresponse.go")
	fatalx.OnError(err, "os.Create failed")

	// TODO(bassosimone): handle all the possible write errors

	fmt.Fprint(filep, "// Code generated by go generate; DO NOT EDIT.\n")
	fmt.Fprintf(filep, "// %v\n\n", time.Now())
	fmt.Fprint(filep, "package apiclient\n\n")
	fmt.Fprint(filep, "import (\n")
	fmt.Fprint(filep, "\t\"encoding/json\"\n")
	fmt.Fprint(filep, "\t\"errors\"\n")
	fmt.Fprint(filep, "\t\"io/ioutil\"\n")
	fmt.Fprint(filep, "\t\"io\"\n")
	fmt.Fprint(filep, "\t\"net/http\"\n")
	fmt.Fprint(filep, ")\n\n")

	for _, descr := range apimodel.Descriptors {
		genapi(filep, &descr)
	}

	err = filep.Close()
	fatalx.OnError(err, "filep.Close failed")
}
