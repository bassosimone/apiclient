// Code generated by go generate; DO NOT EDIT.
// 2021-01-30 18:49:14.15424841 +0100 CET m=+0.000250649

package apiclient

import "context"

//go:generate go run ./internal/genapi/...

// GETCheckReportID implements the GET /api/_/check_report_id API
func (c Client) GETCheckReportID(ctx context.Context, in *CheckReportIDRequest) (*CheckReportIDResponse, error) {
	req, err := newCheckReportIDRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newCheckReportIDResponse(c.HTTPClient.Do(req))
}

// POSTCheckIn implements the POST /api/v1/check-in API
func (c Client) POSTCheckIn(ctx context.Context, in *CheckInRequest) (*CheckInResponse, error) {
	req, err := newCheckInRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newCheckInResponse(c.HTTPClient.Do(req))
}

// GETMeasurementMeta implements the GET /api/v1/measurement_meta API
func (c Client) GETMeasurementMeta(ctx context.Context, in *MeasurementMetaRequest) (*MeasurementMetaResponse, error) {
	req, err := newMeasurementMetaRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newMeasurementMetaResponse(c.HTTPClient.Do(req))
}

// POSTOpenReport implements the POST /report API
func (c Client) POSTOpenReport(ctx context.Context, in *OpenReportRequest) (*OpenReportResponse, error) {
	req, err := newOpenReportRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newOpenReportResponse(c.HTTPClient.Do(req))
}

// POSTSubmitMeasurement implements the POST /report/{{ .ReportID }} API
func (c Client) POSTSubmitMeasurement(ctx context.Context, in *SubmitMeasurementRequest) (*SubmitMeasurementResponse, error) {
	req, err := newSubmitMeasurementRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newSubmitMeasurementResponse(c.HTTPClient.Do(req))
}

// GETTestHelpers implements the GET /api/v1/test-helpers API
func (c Client) GETTestHelpers(ctx context.Context, in *TestHelpersRequest) (*TestHelpersResponse, error) {
	req, err := newTestHelpersRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newTestHelpersResponse(c.HTTPClient.Do(req))
}

// GETURLS implements the GET /api/v1/test-list/urls API
func (c Client) GETURLS(ctx context.Context, in *URLSRequest) (*URLSResponse, error) {
	req, err := newURLSRequest(ctx, c.BaseURL, in)
	if err != nil {
		return nil, err
	}
	if c.Accept != "" {
		req.Header.Add("Accept", c.Accept)
	}
	if c.Authorization != "" {
		req.Header.Add("Authorization", c.Authorization)
	}
	req.Header.Add("User-Agent", c.UserAgent)
	return newURLSResponse(c.HTTPClient.Do(req))
}

