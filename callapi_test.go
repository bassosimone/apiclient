// Code generated by go generate; DO NOT EDIT.
// 2021-02-17 09:49:09.340217116 +0100 CET m=+0.000252858

package apiclient

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"
	"testing"
)

//go:generate go run ./internal/gencallapitest/...

func TestCheckReportIDInvalidURL(t *testing.T) {
	api := &checkReportIDAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckReportIDWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckReportIDWithNewRequestErr(t *testing.T) {
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckReportIDWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckReportIDWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckReportIDWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckReportIDRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestCheckReportIDMandatoryFields(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &checkReportIDAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckReportIDRequest{} // deliberately empty
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrEmptyField) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInInvalidURL(t *testing.T) {
	api := &checkInAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &checkInAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInMarshalErr(t *testing.T) {
	api := &checkInAPI{
		BaseURL: "https://ps1.ooni.io",
		marshal: func(v interface{}) ([]byte, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInWithNewRequestErr(t *testing.T) {
	api := &checkInAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &checkInAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &checkInAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &checkInAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &checkInAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &CheckInRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestLoginInvalidURL(t *testing.T) {
	api := &loginAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &loginAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginMarshalErr(t *testing.T) {
	api := &loginAPI{
		BaseURL: "https://ps1.ooni.io",
		marshal: func(v interface{}) ([]byte, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginWithNewRequestErr(t *testing.T) {
	api := &loginAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &loginAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &loginAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &loginAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &loginAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &LoginRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestMeasurementMetaInvalidURL(t *testing.T) {
	api := &measurementMetaAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaWithNewRequestErr(t *testing.T) {
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestMeasurementMetaMandatoryFields(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &measurementMetaAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &MeasurementMetaRequest{} // deliberately empty
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrEmptyField) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterInvalidURL(t *testing.T) {
	api := &registerAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &registerAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterMarshalErr(t *testing.T) {
	api := &registerAPI{
		BaseURL: "https://ps1.ooni.io",
		marshal: func(v interface{}) ([]byte, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterWithNewRequestErr(t *testing.T) {
	api := &registerAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &registerAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &registerAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &registerAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &registerAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &RegisterRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestTestHelpersInvalidURL(t *testing.T) {
	api := &testHelpersAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersWithNewRequestErr(t *testing.T) {
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestTestHelpersResponseLiteralNull(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &testHelpersAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TestHelpersRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrJSONLiteralNull) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigInvalidURL(t *testing.T) {
	api := &psiphonConfigAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigWithMissingAuthorizer(t *testing.T) {
	api := &psiphonConfigAPI{
		BaseURL: "https://ps1.ooni.io",
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMissingAuthorizer) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigWithNewRequestErr(t *testing.T) {
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestPsiphonConfigResponseLiteralNull(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &psiphonConfigAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &PsiphonConfigRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrJSONLiteralNull) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsInvalidURL(t *testing.T) {
	api := &torTargetsAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsWithMissingAuthorizer(t *testing.T) {
	api := &torTargetsAPI{
		BaseURL: "https://ps1.ooni.io",
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMissingAuthorizer) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsWithNewRequestErr(t *testing.T) {
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestTorTargetsResponseLiteralNull(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &torTargetsAPI{
		Authorizer:      NewStaticAuthorizer("fakeToken"),
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &TorTargetsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrJSONLiteralNull) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsInvalidURL(t *testing.T) {
	api := &urlsAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &urlsAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsWithNewRequestErr(t *testing.T) {
	api := &urlsAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &urlsAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &urlsAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &urlsAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &urlsAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &URLsRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestOpenReportInvalidURL(t *testing.T) {
	api := &openReportAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &openReportAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportMarshalErr(t *testing.T) {
	api := &openReportAPI{
		BaseURL: "https://ps1.ooni.io",
		marshal: func(v interface{}) ([]byte, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportWithNewRequestErr(t *testing.T) {
	api := &openReportAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &openReportAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &openReportAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &openReportAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &openReportAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &OpenReportRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestSubmitMeasurementInvalidURL(t *testing.T) {
	api := &submitMeasurementAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementWithHTTPErr(t *testing.T) {
	clnt := &MockableHTTPClient{Err: ErrMocked}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementMarshalErr(t *testing.T) {
	api := &submitMeasurementAPI{
		BaseURL: "https://ps1.ooni.io",
		marshal: func(v interface{}) ([]byte, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementWithNewRequestErr(t *testing.T) {
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		NewRequest: func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error) {
			return nil, ErrMocked
		},
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementWith400(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{StatusCode: 400}}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrHTTPFailure) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementWithResponseBodyReadErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableBodyWithFailure{},
	}}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementWithUnmarshalFailure(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		unmarshal: func(b []byte, v interface{}) error {
			return ErrMocked
		},
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementRoundTrip(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableEmptyBody{},
	}}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if err != nil{
		t.Fatal(err)
	}
	if resp == nil {
		t.Fatal("expected non-nil resp")
	}
}

func TestSubmitMeasurementTemplateParseErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		newTemplate: func(name string) textTemplate {
			return &templateParseError{}
		},
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementTemplateExecuteErr(t *testing.T) {
	clnt := &MockableHTTPClient{Resp: &http.Response{
		StatusCode: 200,
		Body: &MockableLiteralNull{},
	}}
	api := &submitMeasurementAPI{
		BaseURL:    "https://ps1.ooni.io",
		HTTPClient: clnt,
		newTemplate: func(name string) textTemplate {
			return &templateExecuteError{}
		},
	}
	ctx := context.Background()
	req := &SubmitMeasurementRequest{}
	resp, err := api.Call(ctx, req)
	if !errors.Is(err, ErrMocked) {
		t.Fatalf("not the error we expected: %+v", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

