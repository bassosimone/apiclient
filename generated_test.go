// Code generated by go generate; DO NOT EDIT.
// 2021-02-17 15:33:31.616324457 +0100 CET m=+0.001663672

package apiclient

import (
	"context"
	"strings"
	"testing"

	"github.com/bassosimone/apiclient/internal/imodel"
	"github.com/bassosimone/apiclient/model"
)

//go:generate go run ./internal/cmd/generator

func TestCheckReportIDInvalidURL(t *testing.T) {
	api := &checkReportIDAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.CheckReportIDRequest{
		ReportID: "antani",
	}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestCheckInInvalidURL(t *testing.T) {
	api := &checkInAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.CheckInRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestLoginInvalidURL(t *testing.T) {
	api := &loginAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &imodel.LoginRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestMeasurementMetaInvalidURL(t *testing.T) {
	api := &measurementMetaAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.MeasurementMetaRequest{
		ReportID: "antani",
	}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestRegisterInvalidURL(t *testing.T) {
	api := &registerAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &imodel.RegisterRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTestHelpersInvalidURL(t *testing.T) {
	api := &testHelpersAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.TestHelpersRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestPsiphonConfigInvalidURL(t *testing.T) {
	api := &psiphonConfigAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.PsiphonConfigRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestTorTargetsInvalidURL(t *testing.T) {
	api := &torTargetsAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.TorTargetsRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestURLsInvalidURL(t *testing.T) {
	api := &urlsAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.URLsRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestOpenReportInvalidURL(t *testing.T) {
	api := &openReportAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.OpenReportRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

func TestSubmitMeasurementInvalidURL(t *testing.T) {
	api := &submitMeasurementAPI{
		BaseURL: "\t", // invalid
	}
	ctx := context.Background()
	req := &model.SubmitMeasurementRequest{}
	resp, err := api.call(ctx, req)
	if err == nil || !strings.HasSuffix(err.Error(), "invalid control character in URL") {
		t.Fatalf("not the error we expected: %!v(MISSING)", err)
	}
	if resp != nil {
		t.Fatal("expected nil resp")
	}
}

