// Code generated by go generate; DO NOT EDIT.
// 2021-02-08 14:55:15.396471968 +0100 CET m=+0.000312688

package apiclient

import (
	"context"
	"fmt"
	"net/http"
)

//go:generate go run ./internal/gencall/...

// CheckReportIDAPI is the CheckReportID API. The zero-value structure
// works as intended using suitable default values.
type CheckReportIDAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls GET /api/_/check_report_id. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api CheckReportIDAPI) Call(ctx context.Context, in *CheckReportIDRequest) (*CheckReportIDResponse, error) {
	req, err := newCheckReportIDRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newCheckReportIDResponse(httpClient.Do(req))
}

// CheckInAPI is the CheckIn API. The zero-value structure
// works as intended using suitable default values.
type CheckInAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls POST /api/v1/check-in. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api CheckInAPI) Call(ctx context.Context, in *CheckInRequest) (*CheckInResponse, error) {
	req, err := newCheckInRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newCheckInResponse(httpClient.Do(req))
}

// LoginAPI is the Login API. The zero-value structure
// works as intended using suitable default values.
type LoginAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls POST /api/v1/login. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api LoginAPI) Call(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	req, err := newLoginRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newLoginResponse(httpClient.Do(req))
}

// MeasurementMetaAPI is the MeasurementMeta API. The zero-value structure
// works as intended using suitable default values.
type MeasurementMetaAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls GET /api/v1/measurement_meta. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api MeasurementMetaAPI) Call(ctx context.Context, in *MeasurementMetaRequest) (*MeasurementMetaResponse, error) {
	req, err := newMeasurementMetaRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newMeasurementMetaResponse(httpClient.Do(req))
}

// RegisterAPI is the Register API. The zero-value structure
// works as intended using suitable default values.
type RegisterAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls POST /api/v1/register. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api RegisterAPI) Call(ctx context.Context, in *RegisterRequest) (*RegisterResponse, error) {
	req, err := newRegisterRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newRegisterResponse(httpClient.Do(req))
}

// TestHelpersAPI is the TestHelpers API. The zero-value structure
// works as intended using suitable default values.
type TestHelpersAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls GET /api/v1/test-helpers. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api TestHelpersAPI) Call(ctx context.Context, in *TestHelpersRequest) (TestHelpersResponse, error) {
	req, err := newTestHelpersRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newTestHelpersResponse(httpClient.Do(req))
}

// PsiphonConfigAPI is the PsiphonConfig API. The zero-value structure
// is not valid because Token is always required. We use
// suitable defaults for any other zero-initialized field.
type PsiphonConfigAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	Token      string
	UserAgent  string
}

// Call calls GET /api/v1/test-list/psiphon-config. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api PsiphonConfigAPI) Call(ctx context.Context, in *PsiphonConfigRequest) (PsiphonConfigResponse, error) {
	if api.Token == "" {
		return nil, ErrEmptyToken
	}
	req, err := newPsiphonConfigRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	authorization := fmt.Sprintf("Bearer %s", api.Token)
	req.Header.Add("Authorization", authorization)
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newPsiphonConfigResponse(httpClient.Do(req))
}

// TorTargetsAPI is the TorTargets API. The zero-value structure
// is not valid because Token is always required. We use
// suitable defaults for any other zero-initialized field.
type TorTargetsAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	Token      string
	UserAgent  string
}

// Call calls GET /api/v1/test-list/tor-targets. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api TorTargetsAPI) Call(ctx context.Context, in *TorTargetsRequest) (TorTargetsResponse, error) {
	if api.Token == "" {
		return nil, ErrEmptyToken
	}
	req, err := newTorTargetsRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	authorization := fmt.Sprintf("Bearer %s", api.Token)
	req.Header.Add("Authorization", authorization)
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newTorTargetsResponse(httpClient.Do(req))
}

// URLSAPI is the URLS API. The zero-value structure
// works as intended using suitable default values.
type URLSAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls GET /api/v1/test-list/urls. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api URLSAPI) Call(ctx context.Context, in *URLSRequest) (*URLSResponse, error) {
	req, err := newURLSRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newURLSResponse(httpClient.Do(req))
}

// OpenReportAPI is the OpenReport API. The zero-value structure
// works as intended using suitable default values.
type OpenReportAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls POST /report. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api OpenReportAPI) Call(ctx context.Context, in *OpenReportRequest) (*OpenReportResponse, error) {
	req, err := newOpenReportRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newOpenReportResponse(httpClient.Do(req))
}

// SubmitMeasurementAPI is the SubmitMeasurement API. The zero-value structure
// works as intended using suitable default values.
type SubmitMeasurementAPI struct {
	BaseURL    string
	HTTPClient *http.Client
	UserAgent  string
}

// Call calls POST /report/{{ .ReportID }}. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api SubmitMeasurementAPI) Call(ctx context.Context, in *SubmitMeasurementRequest) (*SubmitMeasurementResponse, error) {
	req, err := newSubmitMeasurementRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	httpClient := api.HTTPClient
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	return newSubmitMeasurementResponse(httpClient.Do(req))
}

