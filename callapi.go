// Code generated by go generate; DO NOT EDIT.
// 2021-02-17 09:49:09.20089356 +0100 CET m=+0.000152930

package apiclient

import (
	"context"
	"fmt"
	"io"
	"net/http"
)

//go:generate go run ./internal/gencallapi/...

// checkReportIDAPI is the checkReportID API. The zero-value structure
// works as intended using suitable default values.
type checkReportIDAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls GET /api/_/check_report_id. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api checkReportIDAPI) Call(ctx context.Context, in *CheckReportIDRequest) (*CheckReportIDResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// checkInAPI is the checkIn API. The zero-value structure
// works as intended using suitable default values.
type checkInAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls POST /api/v1/check-in. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api checkInAPI) Call(ctx context.Context, in *CheckInRequest) (*CheckInResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// loginAPI is the login API. The zero-value structure
// works as intended using suitable default values.
type loginAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls POST /api/v1/login. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api loginAPI) Call(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// measurementMetaAPI is the measurementMeta API. The zero-value structure
// works as intended using suitable default values.
type measurementMetaAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls GET /api/v1/measurement_meta. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api measurementMetaAPI) Call(ctx context.Context, in *MeasurementMetaRequest) (*MeasurementMetaResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// registerAPI is the register API. The zero-value structure
// works as intended using suitable default values.
type registerAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls POST /api/v1/register. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api registerAPI) Call(ctx context.Context, in *RegisterRequest) (*RegisterResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// testHelpersAPI is the testHelpers API. The zero-value structure
// works as intended using suitable default values.
type testHelpersAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls GET /api/v1/test-helpers. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api testHelpersAPI) Call(ctx context.Context, in *TestHelpersRequest) (TestHelpersResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// psiphonConfigAPI is the psiphonConfig API. The zero-value structure
// is not valid because Authorizer is always required. We use
// suitable defaults for any other zero-initialized field.
type psiphonConfigAPI struct {
	Authorizer Authorizer
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls GET /api/v1/test-list/psiphon-config. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api psiphonConfigAPI) Call(ctx context.Context, in *PsiphonConfigRequest) (PsiphonConfigResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	if api.Authorizer == nil {
		return nil, ErrMissingAuthorizer
	}
	token, err := api.Authorizer.MaybeRefreshToken(ctx)
	if err != nil {
		return nil, err
	}
	authorization := fmt.Sprintf("Bearer %s", token)
	req.Header.Add("Authorization", authorization)
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// torTargetsAPI is the torTargets API. The zero-value structure
// is not valid because Authorizer is always required. We use
// suitable defaults for any other zero-initialized field.
type torTargetsAPI struct {
	Authorizer Authorizer
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls GET /api/v1/test-list/tor-targets. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api torTargetsAPI) Call(ctx context.Context, in *TorTargetsRequest) (TorTargetsResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	if api.Authorizer == nil {
		return nil, ErrMissingAuthorizer
	}
	token, err := api.Authorizer.MaybeRefreshToken(ctx)
	if err != nil {
		return nil, err
	}
	authorization := fmt.Sprintf("Bearer %s", token)
	req.Header.Add("Authorization", authorization)
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// urlsAPI is the urls API. The zero-value structure
// works as intended using suitable default values.
type urlsAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls GET /api/v1/test-list/urls. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api urlsAPI) Call(ctx context.Context, in *URLsRequest) (*URLsResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// openReportAPI is the openReport API. The zero-value structure
// works as intended using suitable default values.
type openReportAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls POST /report. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api openReportAPI) Call(ctx context.Context, in *OpenReportRequest) (*OpenReportResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

// submitMeasurementAPI is the submitMeasurement API. The zero-value structure
// works as intended using suitable default values.
type submitMeasurementAPI struct {
	BaseURL     string
	HTTPClient  HTTPClient
	NewRequest  func(ctx context.Context, method, URL string, body io.Reader) (*http.Request, error)
	UserAgent   string
	marshal     func(v interface{}) ([]byte, error)
	newTemplate func(s string) textTemplate
	unmarshal   func(b []byte, v interface{}) error
}

// Call calls POST /report/{{ .ReportID }}. Arguments MUST NOT be nil. The return
// value is either a non-nil error or a non-nil result.
func (api submitMeasurementAPI) Call(ctx context.Context, in *SubmitMeasurementRequest) (*SubmitMeasurementResponse, error) {
	req, err := api.newRequest(ctx, api.BaseURL, in)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("User-Agent", api.UserAgent)
	var httpClient HTTPClient = http.DefaultClient
	if api.HTTPClient != nil {
		httpClient = api.HTTPClient
	}
	return api.newResponse(httpClient.Do(req))
}

