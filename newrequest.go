// Code generated by go generate; DO NOT EDIT.
// 2021-01-30 16:15:13.080368355 +0100 CET m=+0.000195632

package apiclient

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"text/template"
	"net/http"
	"net/url"
	"strings"
)

// NewCheckReportIDRequest creates a new CheckReportIDRequest
func NewCheckReportIDRequest(ctx context.Context, baseURL string, req *CheckReportIDRequest) (*http.Request, error) {
	URL, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	URL.Path = "/api/_/check_report_id"
	query := url.Values{}
	if req.ReportID == "" {
		return nil, errors.New("apiclient: empty ReportID field")
	}
	query.Add("report_id", req.ReportID)
	URL.RawQuery = query.Encode()
	return http.NewRequestWithContext(ctx, "GET", URL.String(), nil)
}

// NewMeasurementMetaRequest creates a new MeasurementMetaRequest
func NewMeasurementMetaRequest(ctx context.Context, baseURL string, req *MeasurementMetaRequest) (*http.Request, error) {
	URL, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	URL.Path = "/api/v1/measurement_meta"
	query := url.Values{}
	if req.ReportID == "" {
		return nil, errors.New("apiclient: empty ReportID field")
	}
	query.Add("report_id", req.ReportID)
	if req.Full {
		query.Add("full", "true")
	}
	if req.Input != "" {
		query.Add("input", req.Input)
	}
	URL.RawQuery = query.Encode()
	return http.NewRequestWithContext(ctx, "GET", URL.String(), nil)
}

// NewOpenReportRequest creates a new OpenReportRequest
func NewOpenReportRequest(ctx context.Context, baseURL string, req *OpenReportRequest) (*http.Request, error) {
	URL, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	URL.Path = "/report"
	body, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}
	return http.NewRequestWithContext(ctx, "POST", URL.String(), bytes.NewReader(body))
}

// NewSubmitMeasurementRequest creates a new SubmitMeasurementRequest
func NewSubmitMeasurementRequest(ctx context.Context, baseURL string, req *SubmitMeasurementRequest) (*http.Request, error) {
	URL, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	tmpl, err := template.New("urlpath").Parse("/report/{{ .ReportID }}")
	if err != nil {
		return nil, err
	}
	var urlpath strings.Builder
	err = tmpl.Execute(&urlpath, req)
	if err != nil {
		return nil, err
	}
	URL.Path = urlpath.String()
	body, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}
	return http.NewRequestWithContext(ctx, "POST", URL.String(), bytes.NewReader(body))
}

// NewTestHelpersRequest creates a new TestHelpersRequest
func NewTestHelpersRequest(ctx context.Context, baseURL string, req *TestHelpersRequest) (*http.Request, error) {
	URL, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	URL.Path = "/api/v1/test-helpers"
	return http.NewRequestWithContext(ctx, "GET", URL.String(), nil)
}

// NewURLSRequest creates a new URLSRequest
func NewURLSRequest(ctx context.Context, baseURL string, req *URLSRequest) (*http.Request, error) {
	URL, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	URL.Path = "/api/v1/test-list/urls"
	query := url.Values{}
	if req.Categories != "" {
		query.Add("categories", req.Categories)
	}
	if req.CountryCode != "" {
		query.Add("country_code", req.CountryCode)
	}
	if req.Limit != 0 {
		query.Add("limit", fmt.Sprintf("%d", req.Limit))
	}
	URL.RawQuery = query.Encode()
	return http.NewRequestWithContext(ctx, "GET", URL.String(), nil)
}

